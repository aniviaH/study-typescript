{"version":3,"file":"./bundle.js","mappings":"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","sources":["webpack://react-tic-tac-toe/external var \"React\"","webpack://react-tic-tac-toe/external var \"ReactDOM\"","webpack://react-tic-tac-toe/./src/constants.ts","webpack://react-tic-tac-toe/./src/board.tsx","webpack://react-tic-tac-toe/./src/restartBtn.tsx","webpack://react-tic-tac-toe/./src/gameStateBar.tsx","webpack://react-tic-tac-toe/./src/app.tsx"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = React;","const __WEBPACK_NAMESPACE_OBJECT__ = ReactDOM;","export type CellValue = '' | 'X' | 'O'\r\nexport type GameState = '' | 'X Wins!' | 'O Wins!' | 'Draw'\r\n\r\nexport const playerCell = \"X\";\r\nexport const aiCell = \"O\";\r\n\r\n","import * as React from \"react\";\r\nimport { playerCell, aiCell, type CellValue, type GameState } from \"./constants\"; \r\n\r\n\r\ninterface BoardState {\r\n    gameState: GameState\r\n    cells: CellValue[]\r\n}\r\n\r\nexport class Board extends React.Component<{}, BoardState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = this.getInitState();\r\n    } \r\n    \r\n    getInitState(): BoardState { \r\n        let cells = Array.apply(null, Array(9)).map(() => \"\");\r\n        return {cells: cells, gameState: \"\"}\r\n    }\r\n\r\n    resetState(): void {\r\n        this.setState(this.getInitState());\r\n    }\r\n     \r\n    componentDidMount() {\r\n        window.addEventListener(\"restart\", () => this.resetState());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"restart\", () => this.resetState());\r\n    }\r\n    \r\n    // Fire a global event notifying GameState changes\r\n    handleGameStateChange(newState: GameState) {\r\n        var event = new CustomEvent(\"gameStateChange\", { \"detail\": this.state.gameState });\r\n        event.initEvent(\"gameStateChange\", false, true); \r\n        window.dispatchEvent(event);\r\n    }   \r\n    \r\n    // check the game state - use the latest move\r\n    checkGameState(cells: CellValue[], latestPos: number, latestVal: CellValue): GameState {\r\n        if (this.state.gameState !== \"\") {\r\n            return this.state.gameState;\r\n        }\r\n        \r\n        // check row\r\n        let result = this.check3Cells(cells, 3 * Math.floor(latestPos / 3), \r\n            3 * Math.floor(latestPos / 3) + 1, 3 * Math.floor(latestPos/3) + 2);\r\n        if (result) {\r\n            return result; \r\n        }\r\n        \r\n        // check col\r\n        result = this.check3Cells(cells, latestPos % 3, latestPos % 3 + 3, latestPos % 3 + 6);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        \r\n        // check diag\r\n        result = this.check3Cells(cells, 0, 4, 8);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        result = this.check3Cells(cells, 2, 4, 6);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        \r\n        // check draw - if all cells are filled\r\n        if (this.findAllEmptyCells(cells).length === 0) {\r\n            return \"Draw\";          \r\n        }\r\n                \r\n        return \"\";\r\n    }\r\n    \r\n    // check if 3 cells have same non-empty val - return the winner state; otherwise undefined \r\n    check3Cells(cells: CellValue[], pos0: number, pos1: number, pos2: number): GameState | undefined {\r\n        if (cells[pos0] === cells[pos1] &&\r\n            cells[pos1] === cells[pos2] &&\r\n            cells[pos0] !== \"\") {\r\n            if (cells[pos0] === \"X\") {\r\n                return \"X Wins!\";\r\n            }\r\n            return \"O Wins!\";\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    \r\n    // list all empty cell positions\r\n    findAllEmptyCells(cells: CellValue[]): number[] {\r\n        return cells.map((v, i) => { \r\n            if (v === \"\") {\r\n                return i;\r\n            }\r\n            else { \r\n                return -1;\r\n            }\r\n        }).filter(v => { return v !== -1 });        \r\n    }\r\n    \r\n    // make a move\r\n    move(pos: number, val: any, callback?: () => void): void {\r\n        if (this.state.gameState === \"\" &&\r\n            this.state.cells[pos] === \"\") {\r\n            let newCells = this.state.cells.slice();\r\n            newCells[pos] = val;\r\n            let oldState = this.state.gameState;\r\n            this.setState({cells: newCells, gameState: this.checkGameState(newCells, pos, val)}, () => {\r\n                if (this.state.gameState !== oldState) {\r\n                    this.handleGameStateChange(this.state.gameState);\r\n                }\r\n                if (callback) {        \r\n                    callback.call(this);\r\n                }\r\n            });                 \r\n        }\r\n    }\r\n\r\n    // handle a new move from player\r\n    handleNewPlayerMove(pos: number): void {\r\n        this.move(pos, playerCell, () => {\r\n            // AI make a random move following player's move\r\n            let emptyCells = this.findAllEmptyCells(this.state.cells);\r\n            let pos = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n            this.move(pos, aiCell);\r\n        });\r\n    }\r\n   \r\n    render() {\r\n        var cells = this.state.cells.map((v, i) => {\r\n            return (\r\n                <Cell key={i} pos={i} val={v} handleMove={() => this.handleNewPlayerMove(i)} />\r\n            )           \r\n        } );\r\n        \r\n        return ( \r\n            <div className=\"board\"> \r\n                {cells}\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\ninterface CellProps {\r\n    pos: number, \r\n    val: CellValue, \r\n    handleMove: () => void\r\n}\r\n\r\nclass Cell extends React.Component<CellProps, {}> {\r\n\r\n    // position of cell to className\r\n    posToClassName(pos: number): string {\r\n        let className = \"cell\";\r\n        switch (Math.floor(pos / 3)) {\r\n            case 0: \r\n                className += \" top\";\r\n                break;\r\n            case 2: \r\n                className += \" bottom\";\r\n                break;\r\n            default: break;             \r\n        }\r\n        switch (pos % 3) {    \r\n            case 0: \r\n                className += \" left\";\r\n                break;\r\n            case 2: \r\n                className += \" right\";\r\n                break;\r\n            default: \r\n                break;             \r\n        }\r\n        return className;\r\n    }\r\n\r\n    handleClick(e: React.MouseEvent<HTMLDivElement>) {\r\n        this.props.handleMove();\r\n    }\r\n\r\n    render() {\r\n        let name = this.props.val;\r\n        if (this.props.val === \"\") {\r\n            name = \"\";\r\n        }\r\n        return <div className={this.posToClassName(this.props.pos)} onClick={e => this.handleClick(e)}> \r\n            <div className={name}> {this.props.val} </div>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport class RestartBtn extends React.Component<any, any> {\r\n\r\n    // Fire a global event notifying restart of game\r\n    handleClick(e: React.MouseEvent<HTMLAnchorElement>) {\r\n        var event = document.createEvent(\"Event\");\r\n        event.initEvent(\"restart\", false, true); \r\n        window.dispatchEvent(event);\r\n    }\r\n    \r\n    render() {\r\n        return <a href=\"#\" className=\"restartBtn\" onClick={e => this.handleClick(e)}>\r\n            Restart\r\n        </a>;\r\n    }\r\n} \r\n","import * as React from \"react\";\r\nimport { type GameState } from \"./constants\";\r\n\r\nexport interface GameStateBarState {\r\n    gameState: GameState\r\n}\r\n\r\nexport class GameStateBar extends React.Component<{}, GameStateBarState> {\r\n    \r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {gameState: \"\"};\r\n    }\r\n    \r\n    private handleGameStateChange(e: CustomEvent) {\r\n        this.setState({gameState: e.detail});\r\n    }\r\n  \r\n    private handleRestart(e: Event) {\r\n        this.setState({gameState: \"\"});\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"gameStateChange\", (e: CustomEvent) => this.handleGameStateChange(e));\r\n        window.addEventListener(\"restart\", e => this.handleRestart(e));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"gameStateChange\", (e: CustomEvent) => this.handleGameStateChange(e));\r\n        window.removeEventListener(\"restart\", e => this.handleRestart(e));\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"gameStateBar\"> {this.state.gameState} </div> \r\n        )\r\n    }\r\n}   \r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Board } from \"./board\";\r\nimport { RestartBtn } from \"./restartBtn\";\r\nimport { GameStateBar } from \"./gameStateBar\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"app\"> \r\n                <Board /> \r\n                <div>\r\n                    <span className=\"description t1\"> Player(X) </span>                \r\n                    <span className=\"description t2\"> Computer(O) </span>\r\n                </div>\r\n                <RestartBtn />\r\n                <GameStateBar />              \r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nrender(\r\n    <App />, document.getElementById(\"content\")\r\n);\r\n"],"names":["React","ReactDOM","props","state","getInitState","cells","Array","apply","map","gameState","resetState","this","setState","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","handleGameStateChange","newState","event","CustomEvent","initEvent","dispatchEvent","checkGameState","latestPos","latestVal","result","check3Cells","Math","floor","findAllEmptyCells","length","pos0","pos1","pos2","v","i","filter","move","pos","val","callback","newCells","slice","call","handleNewPlayerMove","emptyCells","random","render","Cell","key","handleMove","className","posToClassName","handleClick","e","name","onClick","document","createEvent","href","detail","handleRestart","Board","RestartBtn","GameStateBar","App","getElementById"],"sourceRoot":""}